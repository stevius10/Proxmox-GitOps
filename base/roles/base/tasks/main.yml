- name: Base container configuration
  block:
    - name: Update system
      apt:
        update_cache: true
        upgrade: full
        cache_valid_time: 3600
        autoclean: true
        autoremove: true

    - name: Install default applications
      apt:
        name: "{{ default_packages }}"
        state: present

    - name: Create default groups
      group:
        name: "{{ item }}"
        state: present
      loop: "{{ default_groups }}"

    - name: Create default users
      user:
        name: "{{ item.name }}"
        shell: "{{ item.shell | default('/bin/bash') }}"
        groups: "{{ item.groups | default(omit) }}"
        create_home: "{{ item.create_home | default(true) }}"
        home: "{{ item.home | default(omit) }}"
        state: present
      loop: "{{ default_users }}"
      register: created_users

    - name: Configure Sudo
      ansible.builtin.lineinfile:
        path: "/etc/sudoers.d/{{ item }}"
        regexp: "^#?{{ item }}"
        line: "{{ item }} ALL=(ALL:ALL) NOPASSWD: ALL"
        validate: 'visudo -cf %s'
        owner: root
        group: root
        mode: '0440'
        state: present
        create: yes
      loop: "{{ ssh_users }}"

- name: Install configuration management
  block:
    - name: Get latest Cinc version
      ansible.builtin.uri:
        url: https://downloads.cinc.sh/files/stable/cinc/
        return_content: yes
      register: download_configuration_management_version
      retries: 5
      delay: 3
      until: download_configuration_management_version.status == 200
      changed_when: false

    - name: Get configuration management version
      ansible.builtin.set_fact:
        cinc_version: "{{ download_configuration_management_version.content | regex_findall('href=\"(\\d+\\.\\d+\\.\\d+)/\"') | sort | last }}"

    - name: Download configuration management
      ansible.builtin.get_url:
        url: "https://downloads.cinc.sh/files/stable/cinc/{{ cinc_version }}/debian/12/cinc_{{ cinc_version }}-1_{{ arch | default('amd64') }}.deb"
        dest: /tmp/cinc.deb
        validate_certs: no
      register: download_configuration_management_result
      retries: 5
      delay: 3
      until: download_configuration_management_result is succeeded

    - name: Install configuration management
      ansible.builtin.apt:
        deb: /tmp/cinc.deb
        state: present

- name: Application Preparation
  block:
    - name: Create application and key directory
      file:
        path: "/app"
        state: directory
        owner: app
        group: config
        mode: 0755

- name: SSH configuration
  notify: Restart SSH
  when: (configure_ssh | default(true) | bool)
  block:
    - name: Disable SSH password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PasswordAuthentication"
        line: "PasswordAuthentication no"
        backup: yes
        state: present

    - name: Disable SSH root login
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin no"
        backup: yes
        state: present

- name: Container accessibility
  block:
    - name: Store container key
      ansible.builtin.set_fact:
        private_key: "{{ private_key ~ (private_key.endswith('\n') | ternary('', '\n')) }}"
        public_key: "{{ public_key ~ (public_key.endswith('\n') | ternary('', '\n')) }}"

    - name: Save container private key
      copy:
        content: "{{ private_key }}"
        dest: "/root/id_rsa"
        owner: root
        group: root
        mode: 0600

    - name: Save container public key
      copy:
        content: "{{ public_key }}"
        dest: "/root/id_rsa.pub"
        owner: root
        group: root
        mode: 0644

    - name: Verify container key
      shell: ssh-keygen -y -f /root/id_rsa | diff - /root/id_rsa.pub
      register: verify
      changed_when: false
      failed_when: verify.rc != 0

    - name: Set container authorized key
      ansible.posix.authorized_key:
        user: "{{ item }}"
        key: "{{ public_key }}"
        state: present
        exclusive: no
      loop: "{{ ssh_users }}"

- name: Default configuration
  block:
    - name: Copy bash configuration for root
      copy:
        src: .bashrc
        dest: /root/.bashrc
        owner: root
        group: root
        mode: '0644'

    - name: Copy bash configuration for users
      copy:
        src: .bashrc
        dest: "{{ (item.home | default('/home/' + item.name)) }}/.bashrc"
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
        mode: '0644'
      loop: "{{ default_users }}"
      when: item.name in ssh_users
