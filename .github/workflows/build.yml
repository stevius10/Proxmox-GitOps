on:
  workflow_dispatch: 
  push:
    branches: [ main, develop ]

jobs:

  init:
    runs-on: ubuntu-latest
    outputs:
      ip: ${{ steps.config.outputs.ip }}
      id: ${{ steps.config.outputs.id }}
      hostname: ${{ steps.config.outputs.hostname }}
      cores: ${{ steps.config.outputs.cores }}
      memory: ${{ steps.config.outputs.memory }}
      swap: ${{ steps.config.outputs.swap }}
      disk: ${{ steps.config.outputs.disk }}
      boot: ${{ steps.config.outputs.boot }}
      mount: ${{ steps.config.outputs.mount }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set config.env
        id: config
        run: |
          source config.env
          echo "ip=127.0.0.1" >> $GITHUB_OUTPUT
          echo "id=$ID" >> $GITHUB_OUTPUT
          echo "hostname=$HOSTNAME" >> $GITHUB_OUTPUT
          echo "cores=$CORES" >> $GITHUB_OUTPUT
          echo "memory=$MEMORY" >> $GITHUB_OUTPUT
          echo "swap=$SWAP" >> $GITHUB_OUTPUT
          echo "disk=$DISK" >> $GITHUB_OUTPUT
          echo "boot=$BOOT" >> $GITHUB_OUTPUT
          echo "mount=$MOUNT" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: [init]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build container
        run: |
          docker build --build-arg TARGETARCH=amd64 -t proxmox-gitops -f local/Dockerfile .
          docker run -d --name proxmox-container -v ${{ github.workspace }}:/workspace -w /workspace proxmox-gitops

  deploy:
    runs-on: ubuntu-latest
    needs: [init]
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: Mock bootstrapping
        env:
          IP: ${{ needs.init.outputs.ip }}
          ID: ${{ needs.init.outputs.id }}
        run: |
          sudo apt update -y && sudo apt install -y systemd ansible python3 python3-pip curl wget
          sudo python3 -m pip install --upgrade ansible --break-system-packages --ignore-installed ansible-core resolvelib
          ssh-keygen -t ed25519 -f "${ID}" -N ''
          cat <<EOF > base.yml
          - hosts: localhost
            gather_facts: false
            connection: local
            become: true
            tasks:
              - name: Apply base configuration
                ansible.builtin.include_role:
                  name: base
          EOF
          sudo env ANSIBLE_ROLES_PATH="$(pwd)/base/roles" ansible-playbook -i localhost, -c local --become -e "ip=${IP} id=${ID}" \
            -e "arch=$(arch=\"$(uname -m)\"; case \"$arch\" in aarch64|arm64) echo arm64 ;; x86_64) echo amd64 ;; *) echo amd64 ;; esac)" \
            -e "configure_ssh=0" -e "private_key='$(cat ./${ID})\n'" -e "public_key='$(cat ./${ID}.pub)\n'" base.yml
      - name: Mock config.json
        run: |
          cat <<EOF > ./local/config.json
          { "proxmox": { "host": "localhost", "user": "test", "password": "test" },
            "login": "test", "password": "test", "email": "test@example.com" }
          EOF
      - name: Deploy config
        env:
          IP: ${{ needs.init.outputs.ip }}
          ID: ${{ needs.init.outputs.id }}
          PWD: ${{ github.workspace }}
        run: |
            sudo -E IP="$IP" ID="$ID" PWD="$PWD" \
            cinc-client -l info --local-mode --chef-license accept --config-option \
              cookbook_path="." -j ./local/config.json -o config
